{"1": [
  { "cmd": "DROP TABLE IF EXISTS Questions" },
  { "cmd": "DROP TABLE IF EXISTS Answers" },
  { "cmd": "DROP TABLE IF EXISTS Languages" },
  { "cmd": "DROP TABLE IF EXISTS Difficulties" },
  { "cmd": "DROP TABLE IF EXISTS Subjects" },
  { "cmd": "DROP TABLE IF EXISTS QuestionsTypes" },
  { "cmd": "CREATE TABLE Languages (LanguageId INTEGER PRIMARY KEY AUTOINCREMENT, Name VARCHAR(30))" },
  { "cmd": "CREATE TABLE Difficulties (DifficultyId INTEGER PRIMARY KEY AUTOINCREMENT, Name VARCHAR(30))" },
  { "cmd": "CREATE TABLE Subjects (SubjectId INTEGER PRIMARY KEY AUTOINCREMENT, LanguageId INTEGER NOT NULL, Name VARCHAR(30), Link VARCHAR(300), CONSTRAINT `FK_subjects_languages` FOREIGN KEY (LanguageId) referenceS Languages (LanguageId) ON DELETE CASCADE)" },
  { "cmd": "CREATE TABLE Types (TypeId INTEGER PRIMARY KEY AUTOINCREMENT, Name VARCHAR(15))" },
  { "cmd": "CREATE TABLE Questions (QuestionId INTEGER PRIMARY KEY AUTOINCREMENT, QType INTEGER, QLanguage INTEGER, QDifficulty INTEGER, QSubject INTEGER, Text VARCHAR(400) NOT NULL, Auxiliar TINYINT(1) DEFAULT 0, Passed TINYINT(1) DEFAULT 0)" },
  { "cmd": "CREATE TABLE Answers (AnswerId INTEGER PRIMARY KEY AUTOINCREMENT, QuestionId INTEGER NOT NULL, answer TINYINT(1), CONSTRAINT `FK_answers_questions` FOREIGN KEY (QuestionId) referenceS Questions (QuestionId) ON DELETE CASCADE)" },
  { "cmd": "INSERT INTO Languages (Name) VALUES ('C')" },
  { "cmd": "INSERT INTO Languages (Name) VALUES ('Javascript')" },
  { "cmd": "INSERT INTO Languages (Name) VALUES ('Python')" },
  { "cmd": "INSERT INTO Languages (Name) VALUES ('Java')" },
  { "cmd": "INSERT INTO Difficulties (Name) VALUES ('Easy')" },
  { "cmd": "INSERT INTO Difficulties (Name) VALUES ('Novice')" },
  { "cmd": "INSERT INTO Difficulties (Name) VALUES ('Intermediate')" },
  { "cmd": "INSERT INTO Difficulties (Name) VALUES ('Advanced')" },
  { "cmd": "INSERT INTO Difficulties (Name) VALUES ('Expert')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Variables', 'https://www.tutorialspoint.com/cprogramming/c_variables.htm')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Functions', 'https://www.geeksforgeeks.org/functions-in-c/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Operators', 'https://www.geeksforgeeks.org/operators-c-c/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Extras', 'https://devdocs.io/c/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Loops', 'https://www.programiz.com/c-programming/c-for-loop')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'C'), 'Pointers', 'https://beginnersbook.com/2014/01/c-pointers/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Variables', 'https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Statements/var')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Functions', 'https://www.w3schools.com/js/js_functions.asp')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Operators', 'https://www.tutorialsteacher.com/javascript/javascript-operators')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Extras', 'https://developer.mozilla.org/fr/docs/Web/JavaScript')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Loops', 'https://www.javatpoint.com/javascript-loop')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Javascript'), 'Arrays', 'https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Variables', 'https://www.guru99.com/variables-in-python.html')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Functions', 'https://www.w3schools.com/python/python_functions.asp')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Operators', 'https://realpython.com/python-operators-expressions/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Extras', 'https://docs.python.org/3/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Loops', 'https://www.w3schools.com/python/python_for_loops.asp')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Python'), 'Arrays', 'https://www.datacamp.com/community/tutorials/python-arrays')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Variables', 'https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Functions', 'https://www.learnjavaonline.org/en/Functions')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Operators', 'https://www.w3schools.com/java/java_operators.asp')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Extras', 'https://docs.oracle.com/en/java/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Loops', 'https://www.geeksforgeeks.org/loops-in-java/')" },
  { "cmd": "INSERT INTO Subjects (LanguageId, Name, Link) VALUES ((SELECT LanguageId FROM Languages WHERE Name = 'Java'), 'Arrays', 'https://www.programiz.com/java-programming/arrays')" },
  { "cmd": "INSERT INTO Types (Name) VALUES ('TrueOrFalse')" },
  { "cmd": "INSERT INTO Types (Name) VALUES ('ChooseOne')" },
  { "cmd": "INSERT INTO Types (Name) VALUES ('ChooseMult')" },
  { "cmd": "INSERT INTO Types (Name) VALUES ('Sort')" },
  { "_comment" : "Javascript ChooseMult" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (3, 2, 3, 10, 'Which assertion is correct:{*JavaScript is an Object based Programming language,JavaScript is a complete programming language,JavaScript is an object - oriented programming (OOPS) or structured programming language like C++ or C,*JavaScript is a client-side as well as server side scripting language that can be inserted into HTML pages and is understood by web browsers}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (3, 2, 3, 12, 'How to access the last element of a T1 array of 10 elements?{T1[10],*T1[9],T1[T1.length],*T1[T1.length-1]}', 0, 0)" },
  { "_comment" : "Javascript Sort" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (4,2,1,7, 'Rearrange to display \"Hello welcome to javascript\"{**x += \"welcome to \";,*var x = \"Hello \";,****console.log(x);,***x += \"javascript\";}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (4,2,1,7, 'Rearrange to display the name after user input if is not empty {*var name;,**name = prompt(\"Please entrer your name\");,***if(name != \"\"),****console.log(name);}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (4,2,1,7, 'Rearrange the function to create a new dog {*function Dog(dog);,**this.name = dog.name;,****return this.name;,***this.dog_breed = dog.dog_breed;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text,Passed, Auxiliar) VALUES (4,2,1,7, 'Rearrange to display Lydia's name and age {**let age = 21;,***console.log(name);,****console.log(age);,*var name = 'Lydia';}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text,Passed, Auxiliar) VALUES (4,2,1,11, 'Rearrange to display how many cars are in the garage {*var i;,***text += i;,**for (i = 0; i < cars.length; i++),****return text; }', 0, 0)"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text,Passed, Auxiliar) VALUES (4,2,1,11, 'Rearrange to display the i variable {*var i = 0;,****while (i < 5);,**do,***i += 1;}', 0, 0)"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text,Passed, Auxiliar) VALUES (4,2,1,11, 'Rearrange to display number of motorbikes line by line {***for (let i = 0; i < len; i++);,*let len = moto.length;,**let text = \"\";,****console.log(text += cars[i] + \"<br>\")); }', 0, 0)"},
  { "_comment" : "Javascript TrueOrFalse" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,1,9, 'What will this code below output to the console ? console.log(0.1 + 0.2 == 0.3);', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,3,7, 'var bar = null; console.log(typeof bar === \"object\"); what will this code above output to the console ?}', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,1,10, 'JavaScript is a case sensitive language?', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,2,10, 'JavaScript is faster than ASP?', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,3,10, 'Does JavaScript support automatic type conversion?', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,2,1,11, 'Switch is a loop in javascript', 0, 0)" },
  { "_comment" : "Javascript ChooseOne" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,7, 'var a = b = 3;  console.log(\"a defined?\" + (typeof a !== \"undefined\") + \"b defined?\" + (typeof b !== \"undefined\")); what will this code above output to the console ?{* a defined? false b defined? true, a defined? false b defined? false, a defined? true b defined? true, a defined? true b defined? false}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,7,'What is NaN?{The NaN property represents a value that is \"not a null\",*The NaN property represents a value that is \"not a number\", The NaN property represents a value that is \"Not area Negative\"}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,7, 'Which of these assignments is invalid?{short s = 48;,float f = 4.3;,double d = 4.3;,*int I = \"1\";}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,10, 'JavaScript {Must be compiled before being executed,*Runs on the client,Is a language derived from ADA ,Runs on the server only }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,10, 'What is the relationship between Java and JavaScript? {It is the same language but the JavaScript name is used for code running in a web page,*They are two different languages ​​despite some common points on the syntax,Java is an improved version of JavaScript,Java is an island that has nothing to do with }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,8, 'alert( !(1&&0) ?  \"VRAI\" : \"FAUX\") ; what will this code above output to the console{FAUX, A mistake , VRAI :FAUX,*VRAI}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,9, 'What will be the output of the following code: console.log(false == \"0\"){*true,false, false == \"0\"}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,9, 'What will be the output of the following code: console.log(false === \"0\"){true,*false, false === \"0\"}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,12, 'How do you declare a T1 array of 20 elements ?{*T1=new Array(20), var T1[20], var T1= array(20),var T1(20) }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'In an external JavaScript file (.js), you must : {Surround the code with the <script> and </script> tags, Specify the encoding of the file with the @ charset rule, Escape the special (X) HTML characters,* None of the previous answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,8, 'window.prompt() is used to :{Scrolling a text, Scrolling a window,* Display an input dialog, Modify the prompt character of the console}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, 'SQRT2 is : {The square root function, Does not exist in JavaScript,*The square root constant of 2, A sort function }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,12, 'How to invert a T1 array ? {T1.rollout,*T1.reverse(),T1.transpose(),T1.inverse() }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,7, 'Which of the following is a valid variable name in JavaScript ?{var,2a,NaN,*$b,defaut}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,11, ' In a loop, the continue instruction is used to ?{Continue executing the code after the loop,* Go to the next iteration, Go back to the start of the current iteration, Delete all global variables }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,7, 'var iNum = 12 ; iNum %= 2 ; Following this expression, how much is iNum ?{6,14,0.12,*0}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, 'Which method can compare two text strings  ?{charAt(),charCodeAt(),indexOf(),*localeCompare()}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, ' If ch1 = \"ABCED\", that returns ch1.chartAt (3) ? {C,A mistake,ABC,*E}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,11, 'How to exit from a for() or while() loop ? {continue, end,*break, exit}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, 'What does ch1.slice (-3, -1) return if ch1 = \"ABCDE\"? {ABCDE, AB,*CD, BC}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'In the hierarchy of objects, what is the direct parent of the \"checkbox\" object ?{document,window,body,*form}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'How to download and cache an image to avoid display delays ?{preload(),load Image(),*new Image(),cache() }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,7, 'The keyword \"var\" is used to declare variables :{Does not exist in JavaScript,* Local or global, Local only, Global only }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'Which object allows JavaScript to interact with a web server ? {XMLParseRequest,*XMLHttpRequest,mysql_db_query,http_get_request }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, 'Math.floor (-3.4) displays : {-3,Does not exist in JavaScript,3,4 ,*-4}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,12, 'How to sort an array of numbers T1 in descending order ? {T1.sort(-1) ; ,T1.sort(\"Desc\") ;,*T1.sort(function(a,b){return b-a}) ;,T1.sort() ; }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'Which language is best suited for executing a MySQL query ? {CSS,HTML,*PHP,JavaScript }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'What is JQUERY compared to JavaScript? {an add-on for queries,*A free and cross-platform library, A query language, A powerful query function }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,10, 'What symbol is used for single line comments in JavaScript?{*//,#,<!,@}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,10, 'In which HTML tag do we put the JavaScript code?{<javascript>,*<script>,<js>,<rel>}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,8, 'How do I call a function named \"sum\"?{*sum(),call sum(), function sum(),None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,10, 'What is the correct syntax for referring to an external script called \"myscript.js\"?{<script href=\"myscript.js\">,<script name=\"myscript.js\">,*<script src=\"myscript.js\">, All the answers are true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,10, 'Where is the right place to insert JavaScript code?{<head>,*<head>and<body>, <body>,None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'How do you write \"Hello World\" in an alert box?{msg(\"Hello World\");,*alert(\"Hello World\");,msgBox(\"Hello World\");,alertBox(\"Hello World\");}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,8, 'How to create a function in JavaScript?{*function f(), function = f(), function:f(), None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,1,11, 'What loops are supported in JavaScript?{for,while,do-while,*All the answers are true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'How to read / write a file in JavaScript?{Using JavaScript Extensions,Using the ActiveX object,*All the answers are true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'What would be the result of 1 + 2 + \"4\"?{*34,6,A mistake,0}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,11, 'How many ways can you create an array in javascript?{1,*2,4,0}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,11, 'Which of these ways do you use to create an array in JavaScript?{*var arr = new Array(\"valeur1\",\"valeur2\",...,\"valeurN\",*var arr =[\"valeur1\",\"valeur2\",...\"valeurN\",var arr[\"valeur1\",\"valeur2\"...,\"valeurN\",var arr(\"valeur1\",\"valeur2\",...,\"valeurN\") = new Array[]}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,8, 'What method to use to add a new element at the end of an array in javascript?{*push,pop,add,addEnd}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,7, 'What is the data type of variables in JavaScript?{*Object, Var, String, Undefined}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,8, 'What is the pop () method for in JavaScript?{*removes the last element of an array and returns that element,removes the first element of an array and returns that element,All the answers are true,None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,12, 'How to empty an array in JavaScript?{myArray =[], myArray.length = 0;, myArray.splice(0, myArray.length,*All the answers are true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'which of these assertions are correct?{GET displays the data submitted in the URL so in the POST method the information is not displayed because it is encoded in the request,GET can handle a maximum of 2048 characters and POST has no such restrictions,GET only allows ASCII data and POST has no restrictions,*All the answers are true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,7, 'What does typeof 1.4217 return?{*number,integer,float,double}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,2,10, 'What can you use to create an instance of a new object?{instance,*new,this,pop}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,8, 'Which of these methods allows a lowercase ch1 string?{Min(ch1),lower(ch1),ch1.min,*ch1.toLowerCase()}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'What is the correct syntax?{window.getElementById(\"id\"),*document.getElementByid(\"id\"),getElementById(\"id\"),None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'How to get to the url: http://www.etest.com? {url(),*window.location.href,window.location.url,None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'Which event corresponds to the double click?{onDoubleClick,*onDblclick,onDblClick,This event does not exist}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,12, 'How can we get the number of elements of an array T1?{*T1.length, T1.count(), count(T1),length(T)}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'In the object hierarchy, what is the direct parent of the form object?{*document,window,body,form}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'Which instruction opens a new window?{url.open(),open.html(),*window.open(),window.html()}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,5,8, 'What does the T1.map function return (MyFunction){A mistake,*A new array of elements processed by \"My Function\",A chain of elements processed by \"MyFunction\", None of these answers}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,8, 'What returns isNaN (undefined); ?{undefined, A mistake,*true,false}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,8, 'What returns isNaN (\"37,5\"); and isNaN(\"37.5\") ?{true and true, false and false, true and false,*false and true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,8, 'What returns parseInt(\"101abc\");?{101abc,*101,NAN, A mistake}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,8, 'What returns parseInt(\"5432\", 2);?{5432,101,*NAN, A mistake}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,8, 'What returns parseInt(\"HEllO\", 2);?{HEllO,false,*NAN, true}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'What do we refer to the current object with ?{*This,->,&,Point }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'Which of these types of events does not exist ?{blur,load,*mouseclick,mouseout }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,4,10, 'What is the difference between \"location.reload\" and \"location.replace\"?{None, replace does not exist,*replace does not modify browser history, reload does not modify browser history}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'Which of the following syntaxes is correct ?{*if(a != 2) ,if a != 2 ,if (a <> 2) ,if a <> 2 }', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'To check the data of a form before sending, which event is the most appropriate ? {onClick,onLoad,onFocus,*onSubmit}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,2,3,10, 'How to display \"Hello\" on the console ?{ prompt(\"Hello\") ;,*console.log(\"Hello\") ;,console(\"Hello\") ;,log(\"Hello\") ; }', 0, 0);" },

  { "_comment" : "C TrueOrFalse" },

  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,5, 'Only character or integer can be used in switch statement', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'The return type of malloc function is void', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, '#define is known as preprocessor compiler directive', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'Algorithm is the graphical representation of logic', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'sizeof( ) is a function that returns the size of a variable', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,3, 'The ++ operator increments the operand by 1, whereas, the -- operator decrements it by 1', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,5, 'It is necessary that a loop counter must only be an int. It cannot be a float', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,1, 'A zero value is considered to be false and a non-zero value is considered to be true', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,3, '= is used for comparison, whereas, == is used for assignment of two quantities', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,4, 'Blank spaces may be inserted between two words to improve the readability of the statement', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,1, 'The keywords cannot be used as variable names', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,5, 'continue keyword skip one iteration of loop?', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,1, 'Two case constants within the same switch statement can have the same value', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'ferror( ) reports any error that might have occurred during a read/write operation on a file', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'A file opened for writing already exists its contents would be overwritten', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'Structure is collection of dissimilar data types', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,5, 'A do-while loop is used to ensure that the statements within the loop are executed at least twice', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'An algorithm consists of a set of explicit and unambiguous finite steps', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,3, 'In face ++ has a higher precendence than *', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'The Return Statement is optional', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'In function two return statement should never occur', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'C language has been developed by Dennis Ritchie', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,1, 'Null will be defined as something else', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,5, 'The continue keyword is used in loops to skip right to the test condition', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,4, 'C program is developed with the help of C++ language', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,5, 'The break keyword allows you to jump out of any loop at any time', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'A link is a Complier', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,6, 'Pointer is mainly used Point out the Function', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,4, 'If Else statement is used when both the statements are False', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'Strcpy is used to copy the string', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'The C programming language was developed by Charles Babbage', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,5, 'Do while loop tests the condition at the End of the Loop', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'Scanf function is used to display information on the Monitor', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'A Header File is a file that contains Definitions and Macros', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,5, 'A do while loop is very similar to a while loop', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,5, 'A flowchart is graphical representation of an algorithm', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'C is a low level language', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'Is the syntax for the following C statement correct?: scanf(\"%d\", input);', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'The compiler ignores comments and they are not translated into machine language', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'You can have more than one main function', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Linux was developed mainly using C language', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'Statements are executed functions. Expressions are conditions which are evaluated', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'In C all function except main() can be called recursively', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,5, 'A for loop is used to execute a section of code a specific number of times', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'The C complier runs a program called the C Processor', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,1, 'The maximum width of a C variable name can be 10 character', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'Functions can be called either by value or reference', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'A function may have any number of return statements each returning different values', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'Names of functions in two different files linked together must be unique', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'A function cannot be defined inside another function', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'Functions cannot return more than one value at a time', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'If return type for a function is not specified, it defaults to int', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'A long double can be used if range of a double is not enough to accommodate a real number', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'A float is 4 bytes wide, whereas a double is 8 bytes wide', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'Size of short integer and long integer can be verified using the sizeof() operator', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'Size of short integer and long integer would vary from one platform to another', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,3, 'Associativity has no role to play unless the precedence of operator is same', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,3, 'The expression of right part || operators doesn\"t get evaluated if left part side determines the outcome', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,3, 'Associativity of an operator is either Left to Right or Right to Left', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Once preprocessing is over and the program is sent for the compilation the macros are removed from the expanded source code', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'A header file contains macros, structure declaration and function prototypes', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'Macros with arguments are allowed', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Preprocessor directive #ifdef .. #else ... #endif is used for conditional compilation', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'A preprocessor directive is a message from programmer to the preprocessor', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'There exists a way to prevent the same file from getting #included twice in the same program', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'Preprocessor directive #undef can be used only on a macro that has been #define earlier', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'If the file to be included doesn\"t exist, the preprocessor flashes an error message', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'Range of double is -1.7e-38 to 1.7e+38 (in 16 bit platform - Turbo C under DOS)', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'Range of float is -2.25e+308 to 2.25e+308', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'In the expression a=b=5 the order of Assignment is NOT decided by Associativity of operators', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'Macro calls and function calls work exactly similarly', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'A macro must always be defined in capital letters', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'Macros have a local scope', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'Every C program will contain at least one preprocessor directive', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'In a macro call the control is passed to the macro', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'The preprocessor can trap simple errors like missing declarations, nested comments or mismatch of braces', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'A preprocessor directive is a message from compiler to a linker', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'While calling the fprintf() function in the format string conversion specifier %s can be used to write a character string in capital letters', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'If malloc() successfully allocates memory it returns the number of bytes it has allocated', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'malloc() returns a float pointer if memory is allocated for storing float\"s and a double pointer if memory is allocated for storing double\"s', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'On left shifting, the bits from the left are rotated and brought to the right and accommodated where there is empty space on the right?', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'Bitwise & can be used to divide a number by powers of 2', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'Bitwise & and | are unary operators', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'The first argument to be supplied at command-line must always be count of total arguments', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'Every time we supply new set of values to the program at command prompt, we need to recompile the program', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'In a call to printf() function the format specifier %b can be used to print binary equivalent of an integer', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'A text stream is an ordered sequence of characters composed into lines, each line consisting of zero or more characters plus a new-line character', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'Offset used in fseek() function call can be a negative number', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'We should not read after a write to a file without an intervening call to fflush(, fseek() or rewind()', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'Even if integer/float arguments are supplied at command prompt they are treated as strings', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'Left shifting a number by 1 is always equivalent to multiplying it by 2', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,3, 'Bitwise & can be used to check if more than one bit in a number is on', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,3, 'Bitwise & can be used to check if a bit in number is set or not', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,3, 'Left shifting an unsigned int or char by 1 is always equivalent to multiplying it by 2', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'malloc() allocates memory from the heap and not from the stack', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'malloc() returns a NULL if it fails to allocate the requested memory', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'The macro va_arg is used to extract an argument from the variable argument list and advance the pointer to the next argument', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,1, 'A char variable can store either an ASCII character or a Unicode character', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,3, 'The modulus operator cannot be used with a long double', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'A short integer is at least 16 bits wide and a long integer is at least 32 bits wide', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'If the two strings are found to be unequal then strcmp returns difference between the first non-matching pair of characters', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'ftell() returns the current position of the pointer in a file stream', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'FILE is a structure suitably typedef\"d in \"stdio.h\"', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'It is necessary that for the string functions to work safely the strings must be terminated with \"0\"', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,1, 'We can allocate a 2-Dimensional array dynamically', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'Function can return a floating point number', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,6, 'We can modify the pointers \"source\" as well as \"target\"', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'va_list is an array that holds information needed by va_arg and va_end', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'For a function receives variable number of arguments it is necessary that the function should receive at least one fixed argument', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'A function that receives variable number of arguments should use va_arg() to extract arguments from the variable argument list', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'In a function that receives variable number of arguments the fixed arguments passed to the function can be at the end of argument list', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'A function that receives variable number of arguments should use va_arg() to extract the last argument from the variable argument list', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'The macro va_start is used to initialise a pointer to the beginning of the list of fixed arguments', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Does the data type of all elements in the union will be same', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'It is not necessary to typecast the address returned by malloc()', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'Data written into a file using fwrite() can be read back using fscanf()', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'If scanf() is used to store a value in a char variable then along with the value a carriage return(\r) also gets', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'We can increase the size of statically allocated array', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'The macro va_arg is used to extract an argument from the fixed micro argument list and Advanced the pointer to the next argument', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'The fixed arguments passed to the function that accepts variable argument list, can occur at the end', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'we can pass a variable argument list to a function at run-time', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'The following declaration is correct: typedef *void (*pfun)(**int, *float);', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'Standard library is part of C language', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'We can use a switch statement to switch on strings', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,5, 'The way the break is used to take control out of switch and continue to take control of the beginning of the switch', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'We want to test whether a value lies in the range 2 to 4 or 5 to 7. We can do this using a switch', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'By default, the data type of a constant without a decimal point is int, whereas the one with a decimal point is a double', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'The itoa function can convert an integer in decimal, octal or hexadecimal form to a string', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'The prototypes of all standard library string functions are declared in the file string.h', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'scanf() or atoi() function can be used to convert a string like \"436\" in to integer', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'The following declaration is correct: void(*f)(int, void(*)());', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'The following declaration is correct: char (* ( *f())[])();', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'The following declaration is correct: char far *far *ptr;', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,2, 'We drop the ellipsis(...) while defining a variable argument list function', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,2, 'We can write a function that takes a variable argument list and passes the list to another function', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'It is necessary to call the macro va_end if va_start is called in the function', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'We can increase the size of dynamically allocated array', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'When we dynamically allocate memory there is a way to free memory during run time', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,5,4, 'The expression *p = p will be disallowed by the compiler', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,3, 'Two different operators would always have different Associativity', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'In a function two return statements should never occur', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,2, 'Maximum number of arguments that a function can take is 12', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,2, 'Every function must return a value', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,2, 'Functions cannot return a floating point number', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'The expressions arr and &arr are same for an array of 10 integers', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'We can have an array of bit fields', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'It is necessary that the size of all elements in a union should be same', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'There is easy way to print enumeration values symbolically', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,6, 'A pointer union CANNOT be created', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,3, 'The elements of union are always accessed using & operator', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Can we specify a variable field width in a scanf() format string', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'A file written in text mode can be read back in binary mode', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,6, 'stderr, stdin, stdout are FILE pointers', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'size of union is size of the longest element in the union', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,1, 'By default structure variable will be of auto storage class', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,4,4, 'Can a structure can point to itself', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'A pointer to a block of memory is effectively same as an array', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,2, 'If a function contains two return statements successively, the compiler will generate warnings', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,5, 'Usually recursion works slower than loops', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,3,4, 'Too many recursive calls may result into stack overflow', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,1,3, 'Every operator has an Associativity', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,4, 'A global variable may have several declarations, but only one definition', 0, 1)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,1,2,2, 'A function may have several declarations, but only one definition', 0, 1)" },


  { "_comment" : "C ChooseOne" },


  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3, 'The ___ operator is true only when both the operands are true{or,*and,boolean,bitwiseor}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2, '___ function is used to move the file position to desired location within the file{fread,fwrite,*fseek,fscanf}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,5, 'The do...while looping statement {is executed only once if the condition is true,is also known as entry-controlled loop,*is executed at least once if the condition is false,is unconditional looping statement}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1, 'Which of these assignments is invalid?{short s = 48;,float f = 4.3;,double d = 4.3;,*int I = \"1\";}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1, 'Which is an invalid name of identifier?{world,addition23,*test-name,factorial}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5, 'Which of the following is not an iterative statement?{while,do while,*switch,for}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,2, 'What is the purpose of getc()?{read a character from STDIN,*read a character from a file,read all file,read file randomly}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Which data structure type is NOT linear from the following?{Doubly Link List,2D Array,*Binary Search Tree,Queue}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Which of the following sorting algorithms does NOT have a worst-case running time of O(n2)?{Insertion sort,*Merge sort,Quicksort,Bubble sort}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5, 'How many times is a do while loop guaranteed to loop?{0,Variable,*1,Infinitely}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Which of the following storage classes have global visibility in C?{Auto,Static,*Extern,Register}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'A full binary tree with n leaves contains{n nodes,*2n - 1 nodes,log2 n nodes,2n nodes}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'The Case keyword is followed by?{Float values,Character values,Integer values,*Both this[1]&this[2]}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1, 'Type of data and its value is described by{Constants,*Variables,Data Type,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'myarr[5] is equivalent of?{&(myarr + 5,**(myarr + 5,(*myarr + 5,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,6, 'What does the following declaration mean? int (*ptr) [10];{ptr is an array of pointers of 10 integers,*ptr is a pointer to an array of 10 integers,ptr is an array of 10 integers,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1, 'The correct way to round off a floating number x to an integer value is{y = int (x + 0.5,*y = (int) (x + 0.5,y = (int) x + 0.5,y = (int) ((int)x + 0.5)}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1, 'Which of the following has compilation error in C?{int n = 32;,char ch = 65;,float f = (float) 3.2;,*None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'What is default storage class of variables in C language?{extern,local,*auto,global}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Representation of data structure in memory is known as{Recursive,*Abstract data type,Storage structure,File structure}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'Which of the following search algorithm requires a sorted array?{Linear search,Hash search,*Binary search,All of these}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'The largest element of an array index is called its{Lower bound,*Upper bound,Range,All of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3, 'Which of the following is a Compound assignment operators?{+=,*=,/=,*All the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1, 'What will be the output of 5.0 / 2?{2,3,0,*2.5}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'What is %f, %d, %s and %c?{Number Specifier,*Format Specifier,Access Specifier,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'The keywords are also called{Safe words,Static words,*Reserved words,Reused words}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,2, 'Every C Program must have one function called?{switch(,*main(,struct(,for()}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,6, 'Which is the correct syntax to declare constant pointer?{int *const constPtr;,*int constant constPtr;,const int *constPtr;,*this[0] and this[2] both}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,6, 'In which linked list last node address is null?{Doubly linked list,Circular list,*Singly linked list,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'What is Dequeue?{Elements can be added from front,*Elements can be added to or removed from either the front or rear,Elements can be added from rear,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2, 'The Default Parameter Passing Mechanism is called as{*Call by Value,Call by Reference,Call by Address,Call by Name}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'C is ___ Language?{Low Level,*High Level,Assembly Level,Machine Level}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'In which tree, for every node the height of its left subtree and right subtree differ almost by one?{Binary search tree,*AVL tree,Threaded Binary Tree,Complete Binary Tree}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'The worst case time complexity of AVL tree is better in comparison to binary search tree for{Search and insert Operations,Search and Delete Operations, Insert and Delete Operations,*Search, Insert and Delete Operations}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'The C language is{*Context free language,Context sensitive language,Regular language,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'Number of binary trees formed with 5 nodes are{30,36,108,*42}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,2, 'The ___ memory allocation function modifies the previous allocated space{calloc,free,malloc,*realloc}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2, 'The statement printf(\"%c\", 100); will print?{100,garbage,*ASCII equivalent of 100,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Which of the following data structure is linear type?{Strings,Queue,Lists,*All of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'To represent hierarchical relationship between elements, which data structure is suitable?{Priority,*Tree,Dqueue,All of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2, 'The statement print f (\"%d\", 10 ? 0 ? 5 : 1 : 12); will print?{10,0,12,*1}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Queue is a ___ list{LIFO,LILO,FILO,*FIFO}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,2, 'Recursive functions are executed in a?{First In First Out Order,Load Balancing,Parallel Fashion,*Last In First Out Order}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'Which one of the following is not a linear data structure?{Array,*Binary Tree,Queue,Stack}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'A binary tree with 27 nodes has ___ null branches{54,27,26,*None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5, 'Which one of the following sentences is true ?{The body of a while loop is executed at least once,*The body of a do ... while is executed at least once,The body of a do ... while loop is executed 0 or more times,A for loop can never be used in place of a while loop}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,2, 'What is function?{Function is a block of statements that perform some specific task,Function is the fundamental modular unit. A function is usually designed to perform a specific task,Function is a block of code that performs a specific task. It has a name and it is reusable,*All the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,5, 'What is the work of break keyword?{Halt execution of program,Restart execution of program,*Exit from loop or switch statement,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4, 'In switch statement, each case instance value must be ___{*Constant,Variable,Special Symbol,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1, 'Which is the right way to declare constant in C?{int constant var =10;,int const var = 10;,const int var = 10;,*this[1] & this[2] Both}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1, 'What is constant?{*Constants have fixed values that do not change during the execution of a program,Constants have fixed values that change during the execution of a program,Constants have unknown values that may be change during the execution of a program,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,4, 'What is Keywords?{Keywords have some predefine meanings and these meanings can be changed,Keywords have some unknown meanings and these meanings cannot be changed,*Keywords have some predefine meanings and these meanings cannot be changed,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'What is C Tokens?{The smallest individual units of c program,The basic element recognized by the compiler,The largest individual units of program,*this[0] & this[1] Both}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3, 'Bitwise operators can operate upon?{double and chars,floats and doubles,ints and floats,*ints and chars}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2, 'perror( ) function used to ?{Work same as printf(,*prints the error message specified by the compiler,prints the garbage value assigned by the compiler,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'What is the right way to access value of structure variable book{ price, page }?{*printf(\"%d%d\", book.price, book.page);,printf(\"%d%d\", price.book, page.book);,printf(\"%d%d\", price::book, page::book);,printf(\"%d%d\", price->book, page->book);}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'An array elements are always stored in ___ memory locations{*Sequential,Random,Sequential and Random,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'What is right way to Initialization array?{*int num[6] = { 2, 4, 12, 5, 45, 5 } ;,int n{} = { 2, 4, 12, 5, 45, 5 } ;,int n{6} = { 2, 4, 12 } ;,int n(6) = { 2, 4, 12, 5, 45, 5 } ;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,5, 'What is an array?{An array is a collection of variables that are of the dissimilar data type,*An array is a collection of variables that are of the same data type,An array is not a collection of variables that are of the same data type,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'Which of the following is allowed in a C Arithmetic instruction{[],{},*(,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1, 'A C variable cannot start with{An alphabet,A number,A special symbol other than underscore,*this[1] and this[2] both}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'C programs are converted into machine language with the help of{An Editor,*A compiler,An operating system,None of the above}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4, 'For 16-bit compiler allowable range for integer constants is ___?{-3.4e38 to 3.4e38,-32767 to 32768,*-32768 to 32767,-32668 to 32667}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'C Language developed at ___?{*AT & T\"s Bell Laboratories of USA in 1972,AT & T\"s Bell Laboratories of USA in 1970,Sun Microsystems in 1973,Cambridge University in 1972}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,4, 'Who is father of C Language?{Bjarne Stroustrup,*Dennis Ritchie,James A. Gosling,Dr. E.F. Codd}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4, 'Which of the following statements should be used to obtain a remainder after dividing 3.14 by 2.1 ?{rem = 3.14 % 2.1;,rem = modf(3.14, 2.1);,*rem = fmod(3.14, 2.1);,Remainder cannot be obtain in floating point division}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1,  'Which of the following is not a valid variable name declaration?{int __a3;,int __3a;,int __A3;,*None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1,  'Which of the following is not a valid variable name declaration?{int _a3;,int a_3;,*int 3_a;,int _3a}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,4,  'All keywords in C are in ___{*LowerCase letters,UpperCase letters,CamelCase letters,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1,  'Which of the following is not a valid C variable name?{int number;,float rate;,int variable_count;,*int $main;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1,  'Which of the following is true for variable names in C?{They can contain alphanumeric characters as well as special characters,It is not an error to declare a variable to be one of the keywords(like goto or static),*Variable names cannot start with a digit,Variable can be of any length}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1,  'Which is valid C expression?{int my_num = 100.000;,*int my_num = 100000;,int my num = 1000;,int $my_num = 10000;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,1,  'Which of the following is not a valid variable name declaration?{float PI = 3.14;,double PI = 3.14;,int PI = 3.14;,*#define PI 3.14}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,1,  'Which of the following cannot be a variable name in C?{*volatile,true,friend,export}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'The format identifier ‘%i’ is also used for ___ data type{char,*int,float,double}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,1,  'Which data type is most suitable for storing a number 65000 in a 32-bit system?{signed short,*unsigned short,long,int}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4,  'Which of the following is a User-defined data type?{typedef int Boolean;,typedef enum {Mon, Tue, Wed, Thu, Fri} Workdays;,struct {char name[10], int age};,*all of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'What is the size of an int data type?{4 Bytes,8 Bytes,*Depends on the system/compiler,Cannot be determined}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4,  'What is short int in C programming?{The basic data type of C,Qualifier,*Short is the qualifier and int is the basic data type,All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'Which is correct with respect to the size of the data types?{char > int > float,int > char > float,*char < int < double,double > char > int}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'Which of the data types has the size that is variable?{int,*struct,float,double}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,1,  'Which of the following statement is false?{*Constant variables need not be defined as they are declared and can be defined later,Global constant variables are initialized to zero,const keyword is used to define constant values,You cannot reassign a value to a constant variable}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,1,  'Which of the following declaration is not supported by C?{*String str;,char *str;,float str = 3e2;,Both String str; & float str = 3e2;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'What is the precedence of arithmetic operators (from highest to lowest)?{%; *; /; +; –,%; +, /; *; –,+; -; %; *; /,%; +; -; *; /}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which of the following is not an arithmetic operation?{a * = 10;,a / = 10;,*a ! = 10;,a % = 10;}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,3,  'Which of the following data type will throw an error on modulus operation(%)?{char,short,int,*float}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'Do logical operators in the C language are evaluated with the short circuit?{*True,False,Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,3,  'What is the result of logical or relational expression in C?{True or False,*0 or 1,0 if an expression is false and any positive number if an expression is true,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which among the following is NOT a logical or relational operator?{!=,==,||,*=}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'Relational operators cannot be used on ___{*structure,long,strings,float}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'When double is converted to float, then the value is?{Truncated,Rounded,*Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'function tolower(c) defined in library <ctype.h> works for ___{Ascii character set,Unicode character set,Ascii and utf-8 but not EBCDIC character set,*Any character set}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'Which type of conversion is NOT accepted?{From char to int,*From float to char pointer,From negative int to char,From double to char}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'Which of the following type-casting have chances for wrap around?{From int to float,*From int to char,From char to short,From char to int}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'Which of the following typecasting is accepted by C?{Widening conversions,Narrowing conversions,*Widening & Narrowing conversions,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'When do you need to use type-conversions?{The value to be stored is beyond the max limit,The value to be stored is in a form not supported by that data type,To reduce the memory in use, relevant to the value,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'For which of the following, “PI++;” code will fail?{*#define PI 3.14,char *PI = “A”;,float PI = 3.14;,none of the Mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'What is the type of y = x + y; if x is of type float and y is of type int?{*int,float,there is no type for an assignment expression,double}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'What will be the value of (x = foo())!= 1 considering foo() returns 2?{*2,True,1,0}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,3,  'Operation a = a * b + a can also be written as ___{a *= b + 1;,(c = a * b)!=(a = c + a);,a = (b + 1)* a;,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'Which of the following is an invalid assignment operator?{a %= 10;,a /= 10;,a |= 10;,*None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'In expression i = g() + f(), first function called depends on ___{*Compiler,Associativiy of () operator,Precedence of () and + operator,Left to write of the expression}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'Which of the following operators has an associativity from Right to Left?{<=,<<,==,*+=}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'Which of the following is the correct order of evaluation for a = w % x / y * z;?{*% / * =,/ * % =,= % * /,* % / =}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,3,  'Which function in a = func3(6) - func2(4, 5) / func1(1, 2, 3); will be called first?{*func1(),*func2(),*func3(),*Cannot be predicted}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,3,  'Which of the following operator has the highest precedence in the following?{*(),sizeof,*,+}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which of the following is a ternary operator?{&&,>>=,*?:,->}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which of the following are unary operators?{sizeof,–,++,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Where in C the order of precedence of operators do not exist?{Within conditional statements if else,Within while do-while,Within a macro definition,*None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Associativity of an operator is ___{Right to Left,Left to Right,Random fashion,*Both Right to Left and Left to Right}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'Which of the following method is accepted for assignment?{5 = a = b = c = d;,*a = b = c = d = 5;,a = b = 5 = c = d;,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which of the following is NOT possible with any 2 operators in C?{Different precedence, same associativity,Different precedence, different associativity,*Same precedence, different associativity,All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,3,  'Which of the following is possible with any 2 operators in C?{Same associativity different precedence,Same associativity same precedence,Different associativity different precedence,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,3,  'Which of the following operators has the lowest precedence?{!=,&&,?:,*,}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,3,  'Which of the following is an invalid head of if-else statement?{*if (if (a == 1)),if (func1 (a)),if (a),if ((char) a)}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,4,  'Which datatype can accept the switch statement?{int,char,long,*all of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,5,  'The C code for(;;) represents an infinite loop. It can be terminated by ____{*break,exit(0),abort(),terminate}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5,  'Which for loop has range of similar indexes of ‘i’ used in for (i = 0;i < n; i++)?{for (i = n; i>0; i–),for (i = n; i >= 0; i–),for (i = n-1; i>0; i–),*for (i = n-1; i>-1; i–)}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,5,  'Which of the following cannot be used as LHS of the expression in for (exp1;exp2; exp3)?{variable,function,typedef,*macros}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5,  'What is an example of iteration in C?{for,while,do-while,*all of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5,  'Which loop is most suitable to first perform the operation and then test the condition?{for loop,while loop,do-while loop,none of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,5,  'Which keyword can be used for coming out of recursion?{break,*return,exit,both break and return}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5,  'The keyword ‘break’ cannot be simply used within ___{do-while,*if-else,for,while}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,5,  'Which keyword is used to come out of a loop only for that iteration?{break,*continue,return,none of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,5,  'goto can be used to jump from main() to within a function{true,*false,depends,varies}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'Which of the following function declaration is illegal?{int 1bhk(int);,int 1bhk(int a);,int 2bhk(int* int []);,*all of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'Can we use a function as a parameter of another function? [Eg: void wow(int func())]{Yes. We can use the function value conveniently,Yes. We call the function again to get the value; not as convenient as in using variable,*No. C does not support it,This case is compiler dependent}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,2,  'The value obtained in the function is given back to main by using ___ keyword{*return,static,new,volatile}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,2,  'What is the return-type of the function sqrt()?{int,float,*double,*depends on the data type of the parameter}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,2,  'What is the default return type if it is not specified in function definition?{void,*int,double,short int}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'Functions can return structure in C?{*True,False,Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'Functions can return enumeration constants in C?{*true,false,depends on the compiler,depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'Functions in C are always ___{Internal,*External,Both Internal and External,External and Internal are not valid terms for functions}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,2,1,  'Global variables are ___{Internal,*External,Both Internal and External,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,1,  'What is the scope of an external variable?{Whole source file in which it is defined,From the point of declaration to the end of the file in which it is defined,Any source file in a program,*From the point of declaration to the end of the file being compiled}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,3,2,  'What is the scope of a function?{Whole source file in which it is defined,From the point of declaration to the end of the file in which it is defined,Any source file in a program,*From the point of declaration to the end of the file being compiled}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'Array sizes are optional during array declaration by using ___ keyword{auto,static,*extern,register}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'Which of following is not accepted in C?{static a = 10; //static as,static int func (int); //parameter as static,*static static int a; //a static variable prefixed with static,all of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,1,4,  'Which of the following cannot be static in C?{Variables,Functions,Structures,*None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,2,  'Functions have static qualifier for its declaration by default{True,*False,Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,1,  'Is initialisation mandatory for local static variables?{Yes,*No,Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,1,  'Assignment statements assigning value to local static variables are executed only once{True,*False,Depends on the code,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'What is the format identifier for... static a = 20.5;?{%s,*%d,%f,Illegal declaration due to absence of data type}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,1,  'Which of the following is true for the static variable?{It can be called from another function,*It exists even after the function ends,It can be modified in another function by sending it as a parameter,All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'register keyword mandates compiler to place it in machine register{True,*False,Depends on the standard,None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'Register storage class can be specified to global variables{True,*False,Depends on the compiler,Depends on the standard}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'Which among the following is wrong for... register int a;?{Compiler generally ignores the request,You cannot take the address of this variable,Access time to a is critical,*None of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'When compiler accepts the request to use the variable as a register?{*It is stored in CPU,It is stored in cache memory,It is stored in main memory,It is stored in secondary memory}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'Which data type can be stored in register?{int,long,float,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,5,4,  'Which of the following operation is not possible in a register variable?{Reading the value into a register variable,Copy the value from a memory variable,Global declaration of register variable,*All of the mentioned}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,4,  'Which among the following is the correct syntax to declare a static variable register?{static register a;,register static a;,Both static register a; and register static a;,*We cannot use static and register together}', 0, 0)" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (2,1,4,1,  'Register variables reside in ___{stack,*registers,heap,main memory}', 0, 0)" },

  { "_comment" : "Python TrueOrFalse" },

  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,16, 'Python has been an object-oriented language since it existed', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,16, 'An object is simply a collection of data and methods that act on those data. Similarly, a class is a blueprint for that object', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,16, 'We can define a class in python like this: class MyNewClass {'''This is my class. I have created a new class'''}', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,4,14, 'If you just need to work with the keys of a dictionary, then you can use .keys(), which is a method that returns a new view object containing the dictionary’s key', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'In Python, list is mutable', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'In Python 3, the maximum value for an integer is 263 - 1:', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'The following code will raise a KeyError exception: d = {'a': 0, 'b': 1, 'c': 0} if d['a'] > 0: print('ok') elif d['b'] > 0: print('ok') elif d['c'] > 0: print('ok') elif d['d'] > 0: print('ok') else: print('not ok')', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'In Python, you can define a variable without specifying its data type?', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,14, 'The print function is used to receive data from keyboard in a  program', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,14, 'The input function can be used to read a value from keyword. However, by using this statement you need to supply the value in single quotes', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,14, 'In Python, by using the raw_input function the value input from keyboard can be read without the use of single quotes', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'In Python, to access the type of a variable, you can the type function', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,16, 'A comment in Python language can start with # sign', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'In Python, a string can be formatted using %s?', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'A list in Python can't be modified while a tuple can', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'A list can have different types of values', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'In Python, to access an element of the list, you need to specify its index number. The first element has 0 index number', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'To access the elements of the list in forward direction, you can specify either positive or negative index numbers', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'In Python, a tuple is a sequence of values that can't be changed after it is defined', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'Python treats a string as special kind of tuple', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,14, 'In Python, a decision can be made by using if else statement', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,14, 'Checking multiple conditions in Python requires elif statements', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,14, 'If the condition is evaluated to true, the statement(s) of if block will be executed, otherwise the statement(s) in else block(if else is specified) will be executed', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,13, 'Every time when we modify the string, Python Always create a new String and assign a new string to that variable', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,15, 'The ‘in’ operator is used to check if a value exists within an iterable object container such as a list. Evaluates to true if it finds a variable in the specified sequence and false otherwise', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,14, 'What is the result of print(type([]) is list)', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,14, 'What is the result of print(type({}) is set)', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,14, 'Python function always returns a value', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'In Python, Dictionaries are immutable', 0, 0);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,1,13, 'Dictionary keys must be immutable', 0, 1);"},
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Passed, Auxiliar) VALUES (1,3,2,14, 'Items are accessed by their position in a dictionary and All the keys in a dictionary must be of the same type', 0, 0);"},

  { "_comment" : "Java" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 22, 'Java is an object-oriented language', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What is the range of short data type in Java?{-128 to 127, *-32768 to 32767, -2147483648 to 2147483647, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What is the range of byte data type in Java?{*-128 to 127, -32768 to 32767, -2147483648 to 2147483647, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What is the numerical range of a char data type in Java?{*-128 to 127, 0 to 256, 0 to 32767, *0 to 65535}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (3, 4, 2, 19, 'Which of the following are legal lines of Java code?{*int w = (int)888.8;, *byte x = (byte)100L;, *long y = (byte)100;, *byte z = (byte)100L;}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'An expression involving byte, int, and literal numbers is promoted to which of these?{*int, long, byte, float}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'If an expression contains double, int, float, long, then the whole expression will be promoted into which of these data types?{int, long, *double, float}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these literals can be contained in float data type variable?{-1.7e+308, *-3.4e+038, +1.7e+308, -3.4e+050}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which data type value is returned by all transcendental math functions?{int, float, *double, long}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these coding types is used for data type characters in Java?{ASCII, ISO-LATIN-1, *UNICODE, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these values can a boolean variable contain?{*true & false, 0 & 1, Any integer value}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these occupy first 0 to 127 in Unicode character set used for characters in Java?{ASCII, ISO-LATIN-1, None of the mentioned, *ASCII and ISO-LATIN-1}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these is long data type literal?{*0x99fffL, ABCDEFG, 0x99fffa, 99671246}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (3, 4, 1, 19, 'Literal can be of which of these data types?{*integer, *float, *boolean}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these can not be used for a variable name in Java?{identifier, *keyword, identifier & keyword, none of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What will be the error in the following Java code? byte b = 50; b = b * 50;{b cannot contain value 100, limited by its range, ** operator has converted b * 50 into int, which can not be converted to byte without casting, b cannot contain value 50, No error in this code}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What is Truncation is Java?{Floating-point value assigned to an integer type, Integer value assigned to floating type, Floating-point value assigned to an Floating type, Integer value assigned to floating type}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these operators is used to allocate memory to array variable in Java?{malloc, alloc, *new, new malloc}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these is an incorrect array declaration?{int arr[] = new int[5], int [] arr = new int[5], *int arr[] = int [5] new}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'What will be the output of the following Java code? int arr[] = new int [5]; System.out.print(arr);{0, value stored in arr[0], 00000, *Class name@ hashcode in hexadecimal form}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these is an incorrect Statement?{*It is necessary to use new operator to initialize an array, Array can be initialized using comma separated expressions surrounded by curly braces, Array can be initialized when they are declared, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these is necessary to specify at time of array initialization?{*Row, Column, Both Row and Column, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of the following can be operands of arithmetic operators?{Numeric, Boolean, Characters, *Both Numeric & Characters}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Modulus operator, %, can be applied to which of these?{Integers, Floating – point numbers, *Both Integers and floating - point numbers, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (3, 4, 1, 21, 'With x = 0, which of the following are legal lines of Java code for changing the value of x to 1?{*x++;, *x = x +1;, *x += 1;, *x =+ 1;}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Decrement operator, −−, decreases the value of variable by what number?{*1, 2, 3, 4}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'Which of these statements are incorrect?{Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms, Assignment operators run faster than their equivalent long forms, Assignment operators can be used only with numeric and character data type, *None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'Can 8 byte long data type be automatically type cast to 4 byte float data type?', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these is not a bitwise operator?{&, &=, |=, *<=}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'Which operator is used to invert all the digits in a binary representation of a number?{*~, <<<, >>>, ^}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'On applying Left shift operator, <<, on integer bits are lost one they are shifted past which position bit?{1, 32, 33, *31}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'Which right shift operator preserves the sign of the value?{<<, *>>, <<=, >>=}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'Which of these statements are incorrect?{The left shift operator << shifts all of the bits in a value to the left specified number of times, The right shift operator >> shifts all of the bits in a value to the right specified number of times, The left shift operator can be used as an alternative to multiplying by 2, *The right shift operator automatically fills the higher order bits with 0}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'What is the output of relational operators?{Integer, *Boolean, Characters, Double}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these is returned by “greater than”, “less than” and “equal to” operators?{Integers, Floating - point numbers, *Boolean, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (3, 4, 1, 21, 'Which of the following operators can operate on a boolean variable?{*&&, *==, *?:, +=}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 21, 'Which of these operators can skip evaluating right hand operand?{!, |, &, *&&}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 19, 'Which of these statements is correct?{true and false are numeric values 1 and 0, true and false are numeric values 0 and 1, true is any non zero value and false is 0, *true and false are non numeric values}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these have highest precedence?{(), ++, *, >>}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'What should be expression1 evaluate to in using ternary operator as in this line? expression1 ? expression2 : expression3{Integers, Floating - point numbers, *Boolean, None of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these statements are incorrect?{Equal to operator has least precedence, Brackets () have highest precedence, *Division operator “/” has higher precedence than multiplication operator, Addition operator “+” and subtraction operator have equal precedence}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 23, 'Which of these selection statements test only for equality?{if, *switch, if & switch, none of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 23, 'Which of these are selection statements?{*if, for, continue, break}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of the following loops will execute the body of loop even when condition controlling the loop is initially false?{*do-while, while, for, none of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of these jump statements can skip processing the remainder of the code in its body for a particular iteration?{break, return, exit, *continue}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of this statement is incorrect?{switch statement is more efficient than a set of nested ifs, *two case constants in the same switch can have identical values, switch statement can only test for equality, whereas if statement can evaluate any type of boolean expression, it is possible to create a nested switch statements}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'The while loop repeats a set of code while the condition is not met?', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'Break stops the execution of entire program', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'Break halts the execution and forces the control out of the loop', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'Break forces the control out of the loop and starts the execution of next iteration', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'Break halts the execution of the loop for certain time frame', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'do statement executes the code of a loop at least once', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'do statement does not get execute if condition is not matched in the first iteration', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'do statement checks the condition at the beginning of the loop', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 21, 'do statement executes the code more than once always', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of the following is used with the switch statement?{continue, exit, *break, do}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of the following is not a decision making statement?{if, if-else, switch, *do-while}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of the following is not a valid jump statement?{break, *goto, continue, return}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 23, 'From where break statement causes an exit?{Only from innermost loop, Terminates a program, Only from innermost switch, *From innermost loops or switches}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 23, 'Which of the following is not a valid flow control statement?{*exit, break, continue, return}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these keywords is used to make a class?{*class, struct, int, none of the mentioned}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 21, 'Which of these operators is used to allocate memory for an object?{malloc, alloc, *new, give}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Every class must contain a main() method', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Applets do not require a main() method at all', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'There can be only one main() method in a program', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'main() method must be made public', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Public method is accessible to all other classes in the hierarchy', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Public method is accessible only to subclasses of its parent class', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Public method can only be called by object of its class', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'Public method can be accessed by calling object of the public class', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 20, 'What is the return type of a method that does not return any value?{int, float, *void, double}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 2, 20, 'What is the process of defining more than one method in a class differentiated by method signature?{Function overriding, *Function overloading, Function doubling}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 20, 'Which of the following is a method having same name as that of its class?{finalize, delete, class, *constructor}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 20, 'Which method can be defined only once in a program?{*main method, finalize method, static method, private method}', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'All object of a class are allotted memory for the all the variables defined in the class', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'If a function is defined public it can be accessed by object of other class by inheritation', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'main() method must be made public', 1, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (1, 4, 1, 20, 'All object of a class are allotted memory for the methods defined in the class', 0, 0);" },
  { "cmd": "INSERT INTO Questions (QType, QLanguage, QDifficulty, QSubject, Text, Auxiliar, Passed) VALUES (2, 4, 1, 20, 'What is the return type of Constructors?{int, float, void, *none of the mentioned}', 0, 0);"}
]}